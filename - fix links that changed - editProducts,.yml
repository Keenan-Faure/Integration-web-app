- fix links that changed - editProducts, editProduct -- done
- Change Cost Price to Compare To price in the database -- done

- Add form to the productView, name, required - make a script to check whether the required field 
  are filled in, this way we can skip a lot of processing power in php
    - Add required fields to textareas -- done
    - Fixed unsupported Type - NO active field has been defined -- done
    - Add the active field on the form -- done
    - Add javascript check to convert the value inside div to a textarea and push to product - done
- fix scripts of saving and closing the product - done

- Add conditions to the push Products - done
  - Add button (with styles) on addItem.html - done
  - Completed form to submit - done
    - Saves records in Database -- done
  - Test conditions - done

- When searching for products (with " in them) the end point getProductBySKU it returns a non-json result (not neat in browser) - done

- Try to Add pagination to the website
  - styling - done
  - code - done

- Try to add breadcrumbs to the website - N/A


- Add some styling at the end of the productList - neat - done

+-----------------------+

- Reorganise how the user logs into the website
  - will you use a local database to store the users that can access it (admin users, and regular users) - YES - done
  - Once on the website will you you a config file to store that database information? - YES - done 
    - decide which session variables will you use to store the connection data (config data) and which you will use for client data
      - $_SESSION['clientConn'] = $clientData? - done
      - $_SESSION['connection'] = $configData? - done


  - multiple users can login to the application (different users are stored inside a table having a column - priority) (locally)  - review
    * This should be hard coded to be either admin or read-only - No - done

    - find out how to make the users into a different table - done
      - Users details can be found in a table called `Users` in their database:
        * Create own function that will check if the users credentials exist in the table - done
        * After checking if the user exists it will proceed to log into the mysql database using the credentials in the config file - done
          * Something that should be defined prior to running web application - done
        * If the user exists it will store a Token for that user inside the session/database (timeout(?)) - done (No timeout yet)
      - create config file that will stores: - done
        * a Valid MySQL username - done
        * a Valid MySQL password - done
        * a port that we will be using to connect on - done



  - after the user login to the database he gets redirected to the endpoints.php page where he can see all the endpoints - done

  - create dashboard - done
    - create a location where all data (logs) are found. (user can manually clear them) - done (Not removed entirely, just hidden)
      - they have to appear on the logs in session - done
      - create a way for the user to remove the logs, maybe the user can decide which he wants to remove? - no - done

  - getProductId from database table -- future update configure the table Woocommerce to store different IDs - done
  - Stock2Shop table was created to store the date a SKU was pushed and if it was sent correctly - done

  - Created new view on productView.php that allows the user to view the connector details

  - Added audit date to Inventory, Customers to keep track when latest update was processed
  - Added Audit date to products pushed to keep track when last they were pushed, and if they potentially need an update again

+-------------------------------+
| What Can this Application do? |
+-------------------------------+

- Setup includes:
  - having downloaded mysql and installed it on computer
  - configured mysql to contain a user (not root user)
  - along with the database to use

- Once installed and a user has been created. This user details is stored in a config.php file

- Once the above steps have been complete the application opens on Localhost
- lands on the login page, which creates and loads all the required information
  - creates tables, etc.

- The Admin of the app contacts the developer to provide him with access to the app (creates an admin user)
- This app is then passes on
  - client can create as many users as he wants.
  - new Users has to be verified by the admin before they can login.
-


+--------+
| Future |
+--------+

- update Users table to include original tokens that will be used to send orders on an URL
  - No need to login to authenticate because the token is valid
  
- create search feature in products (query params)

- Re-do API - make it more URL based (using query params)
  - understand how previous API works (what is it based on) - done

- Laravel

- Redo output from code (logs) (try to make the output appear on same page and make a script on the server run it and return results (AJAX))
